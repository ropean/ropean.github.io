import{a as q,g as Q}from"./_commonjsHelpers-DaWZu8wl.js";function W(f,_){for(var p=0;p<_.length;p++){const h=_[p];if(typeof h!="string"&&!Array.isArray(h)){for(const v in h)if(v!=="default"&&!(v in f)){const y=Object.getOwnPropertyDescriptor(h,v);y&&Object.defineProperty(f,v,y.get?y:{enumerable:!0,get:()=>h[v]})}}}return Object.freeze(Object.defineProperty(f,Symbol.toStringTag,{value:"Module"}))}var d={exports:{}};const J={},z=Object.freeze(Object.defineProperty({__proto__:null,default:J},Symbol.toStringTag,{value:"Module"})),N=q(z),H="17.2.3",X={version:H};var A;function Z(){if(A)return d.exports;A=1;var f={};const _=N,p=N,h=N,v=N,O=X.version,w=["üîê encrypt with Dotenvx: https://dotenvx.com","üîê prevent committing .env to code: https://dotenvx.com/precommit","üîê prevent building .env in docker: https://dotenvx.com/prebuild","üì° add observability to secrets: https://dotenvx.com/ops","üë• sync secrets across teammates & machines: https://dotenvx.com/ops","üóÇÔ∏è backup and recover secrets: https://dotenvx.com/ops","‚úÖ audit secrets and track compliance: https://dotenvx.com/ops","üîÑ add secrets lifecycle management: https://dotenvx.com/ops","üîë add access controls to secrets: https://dotenvx.com/ops","üõ†Ô∏è  run anywhere with `dotenvx run -- yourcommand`","‚öôÔ∏è  specify custom .env file path with { path: '/custom/path/.env' }","‚öôÔ∏è  enable debug logging with { debug: true }","‚öôÔ∏è  override existing env vars with { override: true }","‚öôÔ∏è  suppress all logs with { quiet: true }","‚öôÔ∏è  write to custom object with { processEnv: myObject }","‚öôÔ∏è  load multiple .env files with { path: ['.env.local', '.env'] }"];function Y(){return w[Math.floor(Math.random()*w.length)]}function E(e){return typeof e=="string"?!["false","0","no","off",""].includes(e.toLowerCase()):!!e}function K(){return process.stdout.isTTY}function L(e){return K()?`\x1B[2m${e}\x1B[0m`:e}const j=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function P(e){const r={};let n=e.toString();n=n.replace(/\r\n?/mg,`
`);let o;for(;(o=j.exec(n))!=null;){const c=o[1];let s=o[2]||"";s=s.trim();const t=s[0];s=s.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),t==='"'&&(s=s.replace(/\\n/g,`
`),s=s.replace(/\\r/g,"\r")),r[c]=s}return r}function R(e){e=e||{};const r=I(e);e.path=r;const n=i.configDotenv(e);if(!n.parsed){const t=new Error(`MISSING_DATA: Cannot parse ${r} for an unknown reason`);throw t.code="MISSING_DATA",t}const o=b(e).split(","),c=o.length;let s;for(let t=0;t<c;t++)try{const a=o[t].trim(),l=B(n,a);s=i.decrypt(l.ciphertext,l.key);break}catch(a){if(t+1>=c)throw a}return i.parse(s)}function U(e){console.error(`[dotenv@${O}][WARN] ${e}`)}function m(e){console.log(`[dotenv@${O}][DEBUG] ${e}`)}function V(e){console.log(`[dotenv@${O}] ${e}`)}function b(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:f.DOTENV_KEY&&f.DOTENV_KEY.length>0?f.DOTENV_KEY:""}function B(e,r){let n;try{n=new URL(r)}catch(a){if(a.code==="ERR_INVALID_URL"){const l=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw l.code="INVALID_DOTENV_KEY",l}throw a}const o=n.password;if(!o){const a=new Error("INVALID_DOTENV_KEY: Missing key part");throw a.code="INVALID_DOTENV_KEY",a}const c=n.searchParams.get("environment");if(!c){const a=new Error("INVALID_DOTENV_KEY: Missing environment part");throw a.code="INVALID_DOTENV_KEY",a}const s=`DOTENV_VAULT_${c.toUpperCase()}`,t=e.parsed[s];if(!t){const a=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);throw a.code="NOT_FOUND_DOTENV_ENVIRONMENT",a}return{ciphertext:t,key:o}}function I(e){let r=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(const n of e.path)_.existsSync(n)&&(r=n.endsWith(".vault")?n:`${n}.vault`);else r=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else r=p.resolve(process.cwd(),".env.vault");return _.existsSync(r)?r:null}function x(e){return e[0]==="~"?p.join(h.homedir(),e.slice(1)):e}function C(e){const r=E(f.DOTENV_CONFIG_DEBUG||e&&e.debug),n=E(f.DOTENV_CONFIG_QUIET||e&&e.quiet);(r||!n)&&V("Loading env from encrypted .env.vault");const o=i._parseVault(e);let c=f;return e&&e.processEnv!=null&&(c=e.processEnv),i.populate(c,o,e),{parsed:o}}function F(e){const r=p.resolve(process.cwd(),".env");let n="utf8",o=f;e&&e.processEnv!=null&&(o=e.processEnv);let c=E(o.DOTENV_CONFIG_DEBUG||e&&e.debug),s=E(o.DOTENV_CONFIG_QUIET||e&&e.quiet);e&&e.encoding?n=e.encoding:c&&m("No encoding is specified. UTF-8 is used by default");let t=[r];if(e&&e.path)if(!Array.isArray(e.path))t=[x(e.path)];else{t=[];for(const u of e.path)t.push(x(u))}let a;const l={};for(const u of t)try{const g=i.parse(_.readFileSync(u,{encoding:n}));i.populate(l,g,e)}catch(g){c&&m(`Failed to load ${u} ${g.message}`),a=g}const T=i.populate(o,l,e);if(c=E(o.DOTENV_CONFIG_DEBUG||c),s=E(o.DOTENV_CONFIG_QUIET||s),c||!s){const u=Object.keys(T).length,g=[];for(const $ of t)try{const D=p.relative(process.cwd(),$);g.push(D)}catch(D){c&&m(`Failed to load ${$} ${D.message}`),a=D}V(`injecting env (${u}) from ${g.join(",")} ${L(`-- tip: ${Y()}`)}`)}return a?{parsed:l,error:a}:{parsed:l}}function S(e){if(b(e).length===0)return i.configDotenv(e);const r=I(e);return r?i._configVault(e):(U(`You set DOTENV_KEY but you are missing a .env.vault file at ${r}. Did you forget to build it?`),i.configDotenv(e))}function M(e,r){const n=Buffer.from(r.slice(-64),"hex");let o=Buffer.from(e,"base64");const c=o.subarray(0,12),s=o.subarray(-16);o=o.subarray(12,-16);try{const t=v.createDecipheriv("aes-256-gcm",n,c);return t.setAuthTag(s),`${t.update(o)}${t.final()}`}catch(t){const a=t instanceof RangeError,l=t.message==="Invalid key length",T=t.message==="Unsupported state or unable to authenticate data";if(a||l){const u=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw u.code="INVALID_DOTENV_KEY",u}else if(T){const u=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw u.code="DECRYPTION_FAILED",u}else throw t}}function G(e,r,n={}){const o=!!(n&&n.debug),c=!!(n&&n.override),s={};if(typeof r!="object"){const t=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw t.code="OBJECT_REQUIRED",t}for(const t of Object.keys(r))Object.prototype.hasOwnProperty.call(e,t)?(c===!0&&(e[t]=r[t],s[t]=r[t]),o&&m(c===!0?`"${t}" is already defined and WAS overwritten`:`"${t}" is already defined and was NOT overwritten`)):(e[t]=r[t],s[t]=r[t]);return s}const i={configDotenv:F,_configVault:C,_parseVault:R,config:S,decrypt:M,parse:P,populate:G};return d.exports.configDotenv=i.configDotenv,d.exports._configVault=i._configVault,d.exports._parseVault=i._parseVault,d.exports.config=i.config,d.exports.decrypt=i.decrypt,d.exports.parse=i.parse,d.exports.populate=i.populate,d.exports=i,d.exports}var k=Z();const ee=Q(k),re=W({__proto__:null,default:ee},[k]);export{re as m};
